package com.zhuye.zhengmeng.user;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.TextView;

import com.blankj.utilcode.util.SPUtils;
import com.blankj.utilcode.util.ToastUtils;
import com.google.gson.Gson;
import com.lzy.okgo.model.Response;
import com.zhuye.zhengmeng.R;
import com.zhuye.zhengmeng.base.BaseActivity;
import com.zhuye.zhengmeng.home.fragment.adapter.SwipeRefreshView;
import com.zhuye.zhengmeng.http.DreamApi;
import com.zhuye.zhengmeng.http.MyCallBack;
import com.zhuye.zhengmeng.user.adapter.ShareAdapter;
import com.zhuye.zhengmeng.user.bean.ShareListBean;
import com.zhuye.zhengmeng.view.MyAppTitle;

import java.util.List;
import java.util.Random;

import butterknife.BindView;
import butterknife.ButterKnife;

public class MyShareActivity extends BaseActivity {

    private static final int MYSHARE_WHAT1 = 0x001;
    private static final int MYSHARE_WHAT2 = 0x002;
    private static final int MYSHARE_WHAT3 = 0x003;

    @BindView(R.id.titleBar)
    MyAppTitle titleBar;
    @BindView(R.id.rv_list)
    RecyclerView mRecyclerView;
    @BindView(R.id.srl)
    SwipeRefreshView mSwipeRefreshView;
    @BindView(R.id.view_empty)
    TextView viewEmpty;

    private ShareAdapter mShareAdapter;
    int page = 1;

    @Override
    protected void processLogic() {

    }

    @Override
    protected void setListener() {
        setTitle();
        //获取数据
        String token = SPUtils.getInstance("userInfo").getString("token");
        DreamApi.getShareListUrl(this, MYSHARE_WHAT1, token, "1", callBack);
    }

    @Override
    protected void loadViewLayout() {
        setContentView(R.layout.activity_my_share);
    }

    @Override
    protected Context getActivityContext() {
        return this;
    }

    private void setTitle() {
        titleBar.initViewsVisible(true, true, false, false);
        titleBar.setAppTitle("我的分享");
        titleBar.setTitleSize(20);
        titleBar.setOnLeftButtonClickListener(new MyAppTitle.OnLeftButtonClickListener() {
            @Override
            public void onLeftButtonClick(View v) {
                finish();
            }
        });
    }

    /**
     * 接口回调
     */
    MyCallBack callBack = new MyCallBack() {
        @Override
        public void onSuccess(int what, Response<String> result) {
            switch (what) {
                case MYSHARE_WHAT1:
                    try {
                        Gson gson = new Gson();
                        ShareListBean shareListBean = gson.fromJson(result.body(), ShareListBean.class);
                        List<ShareListBean.DataBean> datas;
                        datas = shareListBean.getData();
                        if (datas.size() == 0) {
                            viewEmpty.setVisibility(View.VISIBLE);
                        } else {
                            viewEmpty.setVisibility(View.GONE);
                        }
                        //创建布局管理
                        final LinearLayoutManager layoutManager = new LinearLayoutManager(MyShareActivity.this);
                        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
                        mRecyclerView.setLayoutManager(layoutManager);
                        //创建适配器
                        mShareAdapter = new ShareAdapter(R.layout.fragment_share_item1, datas, MyShareActivity.this);
                        //开启动画（默认为渐显效果）
                        mShareAdapter.openLoadAnimation();
                        //给RecyclerView设置适配器
                        mRecyclerView.setAdapter(mShareAdapter);

//                        mShareAdapter.setOnLoadMoreListener();
                        // 不能在onCreate中设置，这个表示当前是刷新状态，如果一进来就是刷新状态，SwipeRefreshLayout会屏蔽掉下拉事件
                        //swipeRefreshLayout.setRefreshing(true);

                        // 设置颜色属性的时候一定要注意是引用了资源文件还是直接设置16进制的颜色，因为都是int值容易搞混
                        // 设置下拉进度的背景颜色，默认就是白色的
                        mSwipeRefreshView.setProgressBackgroundColorSchemeResource(android.R.color.white);
                        // 设置下拉进度的主题颜色
                        mSwipeRefreshView.setColorSchemeResources(R.color.colorAccent, R.color.colorPrimary, R.color.colorPrimaryDark);

                        // 下拉时触发SwipeRefreshLayout的下拉动画，动画完毕之后就会回调这个方法
                        mSwipeRefreshView.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
                            @Override
                            public void onRefresh() {
                                // 开始刷新，设置当前为刷新状态
                                //swipeRefreshLayout.setRefreshing(true);
                                // 这里是主线程
                                // 一些比较耗时的操作，比如联网获取数据，需要放到子线程去执行
                                final Random random = new Random();
                                new Handler().postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        String token = SPUtils.getInstance("userInfo").getString("token");
                                        DreamApi.getShareListUrl(MyShareActivity.this, MYSHARE_WHAT2, token, "1", callBack);
                                        mShareAdapter.notifyDataSetChanged();
                                        // 加载完数据设置为不刷新状态，将下拉进度收起来
                                        mSwipeRefreshView.setRefreshing(false);
                                        page = 1;
                                    }
                                }, 2000);

                            }
                        });

                        initLoadMoreListener();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                default:
                    break;
            }
        }

        @Override
        public void onFail(int what, Response<String> result) {
            switch (what) {
                case MYSHARE_WHAT1:
                    ToastUtils.showShort(result.body());
                    break;
                default:
                    break;
            }
        }
    };

    private void initLoadMoreListener() {

        mRecyclerView.setOnScrollListener(new RecyclerView.OnScrollListener() {
            int lastVisibleItem;

            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);

                //判断RecyclerView的状态 是空闲时，同时，是最后一个可见的ITEM时才加载
                if (newState == RecyclerView.SCROLL_STATE_IDLE && lastVisibleItem + 1 == mShareAdapter.getItemCount()) {

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            ++page;
                            String token = SPUtils.getInstance("userInfo").getString("token");
                            DreamApi.getShareListUrl(MyShareActivity.this, MYSHARE_WHAT3, token, String.valueOf(page), new MyCallBack() {
                                @Override
                                public void onSuccess(int what, Response<String> result) {
                                    Gson gson = new Gson();
                                    ShareListBean shareListBean = gson.fromJson(result.body(), ShareListBean.class);
                                    List<ShareListBean.DataBean> datas;
                                    datas = shareListBean.getData();
                                    if (datas.size() < 0) {
                                        ToastUtils.showShort("没有更多动态了呦");
                                    } else {
                                        mShareAdapter.AddFooterItem(datas);
                                    }
                                }

                                @Override
                                public void onFail(int what, Response<String> result) {

                                }
                            });
                        }
                    }, 1000);


                }

            }

            @Override
            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);

                LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
                //最后一个可见的ITEM
                lastVisibleItem = layoutManager.findLastVisibleItemPosition();
            }
        });

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        page = 1;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // TODO: add setContentView(...) invocation
        ButterKnife.bind(this);
    }
}
