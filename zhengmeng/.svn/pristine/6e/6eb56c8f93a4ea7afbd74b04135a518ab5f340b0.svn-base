package com.zhuye.zhengmeng.user.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.blankj.utilcode.util.SPUtils;
import com.blankj.utilcode.util.ToastUtils;
import com.google.gson.Gson;
import com.lzy.okgo.model.Response;
import com.zhuye.zhengmeng.R;
import com.zhuye.zhengmeng.base.BaseFragment;
import com.zhuye.zhengmeng.dynamic.DynamicDetailActivity;
import com.zhuye.zhengmeng.home.fragment.adapter.DynamicAdapter;
import com.zhuye.zhengmeng.home.fragment.adapter.SwipeRefreshView;
import com.zhuye.zhengmeng.home.fragment.model.DynamicModel;
import com.zhuye.zhengmeng.http.DreamApi;
import com.zhuye.zhengmeng.http.MyCallBack;

import java.util.List;
import java.util.Random;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.Unbinder;

/**
 * Created by hpc on 2017/11/1.
 */

public class ZuopinFragment extends BaseFragment {
    @BindView(R.id.rv_list)
    RecyclerView rvList;
    Unbinder unbinder;
    @BindView(R.id.srl)
    SwipeRefreshView srl;

    private DynamicAdapter dynamicAdapter;
    int page = 1;
    private static final int ZUOPIN_WHAT = 0x001;

    @Override
    protected View initView(LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.fragment_zuopin, container, false);
    }

    @Override
    protected void initListener() {

    }

    @Override
    protected void initData() {
        //获取个人作品
        String token = SPUtils.getInstance("userInfo").getString("token");
        String user_id = SPUtils.getInstance("user_id").getString("user_id");
        DreamApi.conditionListNorefresh(ZUOPIN_WHAT, token, "1", "0", myCallBack);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // TODO: inflate a fragment view
        View rootView = super.onCreateView(inflater, container, savedInstanceState);
        unbinder = ButterKnife.bind(this, rootView);
        return rootView;
    }

    MyCallBack myCallBack = new MyCallBack() {
        @Override
        public void onSuccess(int what, Response<String> result) {
            switch (what) {
                case ZUOPIN_WHAT:
                    Gson gson = new Gson();
                    DynamicModel dynamicModel = gson.fromJson(result.body(), DynamicModel.class);
                    List<DynamicModel.DataBean> datas;
                    datas = dynamicModel.getData();
                    //创建布局管理
                    final LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());
                    layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
                    rvList.setLayoutManager(layoutManager);
                    //创建适配器
                    dynamicAdapter = new DynamicAdapter(R.layout.fragment_dynamic_item1, datas, getActivity());
                    //开启动画（默认为渐显效果）
                    dynamicAdapter.openLoadAnimation();
                    //给RecyclerView设置适配器
                    rvList.setAdapter(dynamicAdapter);
                    dynamicAdapter.setCallBack(new DynamicAdapter.allCheck() {
                        @Override
                        public void OnItemClickListener(String id, String urlPath, String name) {
                            Intent intent = new Intent(getActivity(), DynamicDetailActivity.class);
                            intent.putExtra("production_id", id);
                            intent.putExtra("production_path", urlPath);
                            intent.putExtra("production_name", name);
                            startActivity(intent);
                        }
                    });
                    // 设置颜色属性的时候一定要注意是引用了资源文件还是直接设置16进制的颜色，因为都是int值容易搞混
                    // 设置下拉进度的背景颜色，默认就是白色的
                    srl.setProgressBackgroundColorSchemeResource(android.R.color.white);
                    // 设置下拉进度的主题颜色
                    srl.setColorSchemeResources(R.color.colorPrimary, R.color.salmon, R.color.violet);
                    // 下拉时触发SwipeRefreshLayout的下拉动画，动画完毕之后就会回调这个方法
                    srl.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
                        @Override
                        public void onRefresh() {
                            // 开始刷新，设置当前为刷新状态
                            srl.setRefreshing(true);
                            // 这里是主线程
                            // 一些比较耗时的操作，比如联网获取数据，需要放到子线程去执行
                            final Random random = new Random();
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    String token = SPUtils.getInstance("userInfo").getString("token");
                                    DreamApi.conditionListNorefresh(ZUOPIN_WHAT, token, "1", "0", myCallBack);
                                    dynamicAdapter.notifyDataSetChanged();
                                    // 加载完数据设置为不刷新状态，将下拉进度收起来
                                    srl.setRefreshing(false);
                                    page = 1;
                                }
                            }, 2500);

                        }
                    });
                    initLoadMoreListener();
                    break;
            }
        }

        @Override
        public void onFail(int what, Response<String> result) {

        }
    };

    private void initLoadMoreListener() {

        rvList.setOnScrollListener(new RecyclerView.OnScrollListener() {
            int lastVisibleItem;

            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);

                //判断RecyclerView的状态 是空闲时，同时，是最后一个可见的ITEM时才加载
                if (newState == RecyclerView.SCROLL_STATE_IDLE && lastVisibleItem + 1 == dynamicAdapter.getItemCount()) {

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            ++page;
                            String token = SPUtils.getInstance("userInfo").getString("token");
                            DreamApi.conditionListNorefresh(ZUOPIN_WHAT, token, String.valueOf(page), "0", new MyCallBack() {
                                @Override
                                public void onSuccess(int what, Response<String> result) {
                                    Gson gson = new Gson();
                                    DynamicModel dynamicModel = gson.fromJson(result.body(), DynamicModel.class);
                                    List<DynamicModel.DataBean> datas;
                                    datas = dynamicModel.getData();
                                    if (datas.size() == 0) {
                                        ToastUtils.showShort("没有更多动态了呦");
                                    } else {
                                        dynamicAdapter.AddFooterItem(datas);
                                    }
                                }

                                @Override
                                public void onFail(int what, Response<String> result) {

                                }
                            });
                        }
                    }, 1000);
                }
            }

            @Override
            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
                //最后一个可见的ITEM
                lastVisibleItem = layoutManager.findLastVisibleItemPosition();
            }
        });

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        page = 1;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        unbinder.unbind();
    }
}
